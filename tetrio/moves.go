package tetrio

const (
	I0Shape = iota
	I90Shape
	I180Shape
	I270Shape

	J0Shape
	J90Shape
	J180Shape
	J270Shape

	L0Shape
	L90Shape
	L180Shape
	L270Shape

	O0Shape
	O90Shape
	O180Shape
	O270Shape

	T0Shape
	T90Shape
	T180Shape
	T270Shape

	S0Shape
	S90Shape
	S180Shape
	S270Shape

	Z0Shape
	Z90Shape
	Z180Shape
	Z270Shape

	kShapeSize
)

type Pair struct {
	i, j int
}

var dims = [kShapeSize]Pair{
	{3, 0}, {0, 3}, {3, 0}, {0, 3},
	{2, 1}, {1, 2}, {2, 1}, {1, 2},
	{2, 1}, {1, 2}, {2, 1}, {1, 2},
	{1, 1}, {1, 1}, {1, 1}, {1, 1},
	{1, 2}, {2, 1}, {1, 2}, {2, 1},
	{1, 2}, {2, 1}, {1, 2}, {2, 1},
	{1, 2}, {2, 1}, {1, 2}, {2, 1},
}
var floors = [kShapeSize][]Pair{
	{{-1, 0}},
	{{-1, 0}, {-1, 1}, {-1, 2}, {-1, 3}},
	{{-1, 0}},
	{{-1, 0}, {-1, 1}, {-1, 2}, {-1, 3}},

	{{-1, 0}, {-1, 1}},
	{{-1, 0}, {-1, 1}, {-1, 2}},
	{{-1, 0}, {1, 1}},
	{{0, 0}, {0, 1}, {-1, 2}},

	{{-1, 0}, {-1, 1}},
	{{-1, 0}, {0, 1}, {0, 2}},
	{{1, 0}, {-1, 1}},
	{{-1, 0}, {-1, 1}, {-1, 2}},

	{{-1, 0}, {-1, 1}},
	{{-1, 0}, {-1, 1}},
	{{-1, 0}, {-1, 1}},
	{{-1, 0}, {-1, 1}},

	{{0, 0}, {-1, 1}, {0, 2}},
	{{0, 0}, {-1, 1}},
	{{-1, 0}, {-1, 1}, {-1, 2}},
	{{-1, 0}, {0, 1}},

	{{-1, 0}, {-1, 1}, {0, 2}},
	{{0, 0}, {-1, 1}},
	{{-1, 0}, {-1, 1}, {0, 2}},
	{{0, 0}, {-1, 1}},

	{{0, 0}, {-1, 1}, {-1, 2}},
	{{-1, 0}, {0, 1}},
	{{0, 0}, {-1, 1}, {-1, 2}},
	{{-1, 0}, {0, 1}},
}

var shapes = [kShapeSize][]Pair{
	{{0, 0}, {1, 0}, {2, 0}, {3, 0}},
	{{0, 0}, {0, 1}, {0, 2}, {0, 3}},
	{{0, 0}, {1, 0}, {2, 0}, {3, 0}},
	{{0, 0}, {0, 1}, {0, 2}, {0, 3}},

	{{0, 0}, {0, 1}, {1, 1}, {2, 1}},
	{{0, 0}, {0, 1}, {0, 2}, {1, 0}},
	{{0, 0}, {1, 0}, {2, 0}, {2, 1}},
	{{1, 0}, {1, 1}, {1, 2}, {0, 2}},

	{{0, 0}, {0, 1}, {1, 0}, {2, 0}},
	{{0, 0}, {1, 0}, {1, 1}, {1, 2}},
	{{2, 0}, {2, 1}, {1, 1}, {0, 1}},
	{{0, 0}, {0, 1}, {0, 2}, {1, 2}},

	{{0, 0}, {0, 1}, {1, 0}, {1, 1}},
	{{0, 0}, {0, 1}, {1, 0}, {1, 1}},
	{{0, 0}, {0, 1}, {1, 0}, {1, 1}},
	{{0, 0}, {0, 1}, {1, 0}, {1, 1}},

	{{1, 0}, {1, 1}, {1, 2}, {0, 1}},
	{{1, 0}, {0, 1}, {1, 1}, {2, 1}},
	{{0, 0}, {0, 1}, {0, 2}, {1, 1}},
	{{0, 0}, {1, 0}, {2, 0}, {1, 1}},

	{{0, 0}, {0, 1}, {1, 1}, {1, 2}},
	{{1, 0}, {2, 0}, {0, 1}, {1, 1}},
	{{0, 0}, {0, 1}, {1, 1}, {1, 2}},
	{{1, 0}, {2, 0}, {0, 1}, {1, 1}},

	{{1, 0}, {1, 1}, {0, 1}, {0, 2}},
	{{0, 0}, {1, 0}, {1, 1}, {2, 1}},
	{{1, 0}, {1, 1}, {0, 1}, {0, 2}},
	{{0, 0}, {1, 0}, {1, 1}, {2, 1}},
}

func FitDimension(tetris *Tetris, i int, j int, shape int) (name bool) {
	return 0 <= i && i+dims[shape].i < tetris.rows() && 0 <= j && j+dims[shape].j < tetris.cols()
}

func OnFloor(tetris *Tetris, i int, j int, shape int) bool {
	for _, point := range floors[shape] {
		if i+point.i < 0 || tetris.board[i+point.i][j+point.j] {
			return true
		}
	}
	return false
}

func CombineShape(tetris *Tetris, i int, j int, shape int) Tetris {
	combined := CopyTetris(tetris)
	for _, point := range shapes[shape] {
		combined.board[i+point.i][j+point.j] = true
	}
	return combined
}
